<%
  # app/views/trainings/pages/_edit_header.html.erb
  #
  # Example:
  #   render partial: 'trainings/pages/edit_header', locals: { trainings_presenter: TrainingsPresenter }
  #
  # Required Instance Variables:
  #   none
  #
  # Required Local Variables:
  #   none
  #
  tp = local_assigns.dig(:trainings_presenter) || TrainingsPresenter.new(training: @training, training_page: @training_page)
-%>
<%= form_tag training_training_page_path(tp.training.id, tp.training_page.id), { builder: LooperFormBuilder, remote: true, method: :patch, html: { class: 'needs-validation', novalidate: true } } do %>
  <%= bootstrap_text_area(
        field:        'training_page[header]',
        value:        tp.training_page.header,
        row:          { columns: [0, 12] },
        html_options: { id: 'training_page_header' }
      ) %>
  <%= bootstrap_submit_buttons(
        buttons: [{ title: 'Save Header', id: 'training_page_header_submit', disable_with: 'Saving Header' }]
      ) %>
<% end %>

<script>
  $(function() {
    tinymce.init({
      selector: 'textarea#training_page_header',
      plugins: ['preview', 'code', 'fullscreen', 'table', 'emoticons', 'media', 'image', 'link', 'lists', 'wordcount'],
      toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist media',
      promotion: false,
      skin: false,
      content_css: false,
      width: '100%',
      height: 500,
      file_picker_types: 'image',
      images_upload_handler: (function (blobInfo, progress) {
        return new Promise(function (resolve, reject) {
          var xhr, formData;
          xhr = new XMLHttpRequest();
          xhr.withCredentials = false;
          xhr.open(
            "POST",
            "https://api.cloudinary.com/v1_1/<%= Rails.application.credentials[:cloudinary][:cloud_name] -%>/auto/upload"
          );
          xhr.upload.onprogress = function (e) {
            progress((e.loaded / e.total) * 100);
          };
          xhr.onload = function () {
            if (xhr.readyState == 4 && xhr.status == 200) {
              var response = JSON.parse(xhr.responseText);
              var url = response.secure_url; //get the url
              var json = {
                location: url
              }; //set it in the format tinyMCE wants it
              resolve(json.location);
            }
          };
          formData = new FormData();
          formData.append("file", blobInfo.blob(), blobInfo.filename());
          formData.append("upload_preset", "MessageEmailAttachment");
          xhr.send(formData);
        });
      }),
      setup: function (editor) {}
    });

    $(document).on('shown.bs.modal', '#training_page_header_modal', function () {
      tinymce.execCommand('mceAddEditor', false, 'training_page_header');
    });

    $(document).on('hidden.bs.modal', '#training_page_header_modal', function () {
      tinymce.execCommand('mceRemoveEditor', false, 'training_page_header');
    });

    $(document).on('focusin', function(e) {
      if ($(e.target).closest(".tox-dialog").length) {
        e.stopImmediatePropagation();
      }
    });

    $('#training_page_header_submit').on('click', function(e) {
      $('#training_page_header_modal').modal('hide');
    });
  });
</script>
